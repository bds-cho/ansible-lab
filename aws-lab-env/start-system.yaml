# =====> Deploying Frontend <=====
- name: Start Frontend
  hosts: frontend
  gather_facts: True

  tasks:
    # Update APT Cache and Repos
    - name: Update APT
      apt: update_cache=True
      when: ansible_distribution == "Debian"
    
    # Install Nginx Web-Server
    - name: Install Nginx
      apt: name=nginx state=present
      when: ansible_distribution == "Debian"

    # Copy Static Files to Nginx Location
    - name: Copy Static files
      copy:
        src: ./util/index.html
        dest: /var/www/html/index.html
        mode: 0644

    # Restart Nginx Service after Changes
    - name: Restart Nginx Service
      service: name=nginx state=restarted

# =====> Deploying SQL-Server <=====
- name: Start SQL-Server
  hosts: sql_server
  gather_facts: True

  tasks:
    # Update DNF Cache and Repos
    - name: Update DNF
      dnf: update_cache=True
      when: ansible_distribution == "RedHat"

    # Install MySQL
    - name: Install MySQL
      dnf: name=mysql-server state=present
      when: ansible_distribution == "RedHat"

    # Restart MySQL Service after Changes
    - name: Restart MySQL Service
      service: name=mysqld state=restarted

# =====> Deploying Load-Balancer <=====
- name: Start Load-Balancer
  hosts: load_balancer
  gather_facts: True

  tasks:
    # Update DNF Cache and Repos
    - name: Update DNF
      dnf: update_cache=True
      when: ansible_distribution == "RedHat"

    # Install Nginx
    - name: Install Nginx
      dnf: name=nginx state=present
      when: ansible_distribution == "RedHat"

    # Copy Nginx-Configuration File
    - name: Copy Static files
      copy:
        src: ./util/nginx.conf
        dest: /etc/nginx/nginx.conf
        mode: 0644

    # Allow HTTP Connections
    - name: Allow HTTP connections (bypass SELinux)
      shell: setsebool -P httpd_can_network_connect 1

    # Restart Nginx Service after Changes
    - name: Restart Nginx Service
      service: name=nginx state=restarted

# =====> Install Node-Exporter on Hosts <=====
- name: Install Node-Exporter
  hosts: all
  gather_facts: True

  tasks:
    # Copy Node-Exporter Binary
    - name: Copy Node-Exporter
      copy:
        src: ./util/node_exporter
        dest: /bin/
        mode: 0770

    # Start Node-Exporter
    - name: Start Node-Exporter
      shell: "(nohup /bin/node_exporter > /root/node_exporter.log 2>&1 &)"

# =====> Deploying Monitoring Server <=====
- name: Start Monitoring
  hosts: monitoring_server
  gather_facts: True

  tasks:
    # Update APT Cache and Repos
    - name: Update APT
      apt: update_cache=True
      when: ansible_distribution == "Debian"

    # Install Docker
    #- name: Install Docker
    #  script: ./util/install-docker-deb.sh >> docker-installation.log

    # Create Prometheus Folder
    - name: Create Prometheus Folder
      file: path=/etc/prometheus state=directory mode=0755

    # Create Prometheus Config File
    - name: Template the Prometheus-Config
      template:
        src: ./util/prometheus.yml.j2
        dest: /etc/prometheus/prometheus.yml
        mode: 0644
      notify: Restart Prometheus

    # Deploy Prometheus Container
    - name: Deploy Prometheus
      docker_container:
        name: prometheus_container
        restart_policy: always
        image: prom/prometheus
        state: present
        volumes:
          - /etc/prometheus/:/etc/prometheus/
        network_mode: host
      notify: Restart Prometheus

  handlers:
    - name: Restart Prometheus
      docker_container:
        name: prometheus_container
        state: started
